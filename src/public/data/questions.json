{
  "easy": [
    {
      "id": "5a3a62f9-4e0f-4f01-bc60-5c79807d7100",
      "title": "Reverse a String",
      "difficulty": "easy",
      "description": "Write a function that takes a string as input and reverses the order of its characters. This function should return the reversed string. For example, if the input is 'hello', the function should return 'olleh'. The function should handle both single words and multi-word strings, returning the reversed version of the input as output. Additionally, the function should preserve the case of each character.",
      "examples": [
        { "input": "hello", "output": "olleh" },
        { "input": "world", "output": "dlrow" }
      ]
    },
    {
      "id": "9f327f4b-3a4f-4c4a-b0ff-beb66a575f90",
      "title": "Find the Largest Number in an Array",
      "difficulty": "easy",
      "description": "Write a function that takes an array of numbers as input and returns the largest number in the array. If the array is empty, the function should return 'undefined'. This function should correctly handle both positive and negative numbers, as well as floating-point numbers.",
      "examples": [
        { "input": [1, 2, 3, 4, 5], "output": 5 },
        { "input": [-10, -20, -5], "output": -5 }
      ]
    },
    {
      "id": "c49f3d4d-72a0-42c7-8b73-9f6c88b2224b",
      "title": "Check if a Number is Prime",
      "difficulty": "easy",
      "description": "Write a function that checks if a number is prime. A prime number is a number greater than 1 that has no divisors other than 1 and itself. The function should return 'true' if the number is prime and 'false' otherwise. Make sure the function works for both small and large numbers and handles edge cases like numbers less than 2.",
      "examples": [
        { "input": 7, "output": true },
        { "input": 10, "output": false }
      ]
    },
    {
      "id": "6d848f88-5a75-47bc-83fc-bd2e5b57d6a0",
      "title": "Count Vowels in a String",
      "difficulty": "easy",
      "description": "Write a function that counts the number of vowels ('a', 'e', 'i', 'o', 'u') in a given string. The function should return the count of vowels in the string, ignoring case. The string may contain spaces, punctuation, or other non-alphabetic characters, but they should not be counted as vowels. The function should return 0 if there are no vowels in the string.",
      "examples": [
        { "input": "hello", "output": 2 },
        { "input": "world", "output": 1 }
      ]
    },
    {
      "id": "7d2f177b-55ad-47a3-b6ab-9e0531a2f34a",
      "title": "Sum of Array Elements",
      "difficulty": "easy",
      "description": "Write a function that takes an array of numbers and returns the sum of all elements in the array. If the array is empty, the function should return 0. The function should work for both small and large arrays of numbers and handle both positive and negative numbers correctly.",
      "examples": [
        { "input": [1, 2, 3, 4], "output": 10 },
        { "input": [-1, -2, -3], "output": -6 }
      ]
    },
    {
      "id": "c9a9cbf4-3b42-4ccf-b38a-c8d9cc4c9c43",
      "title": "Find the Length of a String",
      "difficulty": "easy",
      "description": "Write a function that returns the length of a given string. The function should return an integer representing the number of characters in the string, including spaces and punctuation. It should work for any length of string, including empty strings, which should return 0.",
      "examples": [
        { "input": "hello", "output": 5 },
        { "input": "world!", "output": 6 }
      ]
    },
    {
      "id": "a6e472d3-2d6b-432a-9b7e-2c8ecbaee92e",
      "title": "Check if a Word is a Palindrome",
      "difficulty": "easy",
      "description": "Write a function that checks if a given word is a palindrome. A palindrome is a word that reads the same forward and backward (e.g., 'racecar'). The function should return 'true' if the word is a palindrome and 'false' otherwise. It should be case-insensitive and ignore spaces and non-alphabetic characters.",
      "examples": [
        { "input": "racecar", "output": true },
        { "input": "hello", "output": false }
      ]
    },
    {
      "id": "8bca8774-3c51-4b76-a28a-b1e627fda22f",
      "title": "Find the Second Largest Element",
      "difficulty": "easy",
      "description": "Write a function that returns the second largest element in an array of numbers. If the array has fewer than two elements, the function should return 'undefined'. If there are duplicate largest elements, the function should return the next largest distinct element. Handle both positive and negative numbers in the array.",
      "examples": [
        { "input": [1, 2, 3, 4, 5], "output": 4 },
        { "input": [10, 10, 10, 5], "output": 5 }
      ]
    },
    {
      "id": "03288b93-34c1-4c96-a45a-c4e6796e4d91",
      "title": "Sum of Even Numbers",
      "difficulty": "easy",
      "description": "Write a function that returns the sum of all even numbers in a given array. The function should correctly handle arrays that contain both positive and negative numbers, and should ignore odd numbers. If there are no even numbers in the array, the function should return 0.",
      "examples": [
        { "input": [1, 2, 3, 4], "output": 6 },
        { "input": [10, -2, 3, 7], "output": 8 }
      ]
    },
    {
      "id": "d3a2e592-7d3a-4cc2-bf61-235b47e0305c",
      "title": "Merge Two Sorted Arrays",
      "difficulty": "easy",
      "description": "Write a function that merges two sorted arrays into one sorted array. The function should assume that both arrays are sorted in ascending order and return a new array that contains all elements from both arrays, sorted in ascending order. The function should handle arrays with varying lengths.",
      "examples": [
        { "input": "[1, 3, 5], [2, 4, 6]", "output": [1, 2, 3, 4, 5, 6] },
        { "input": "[-1, 0, 2], [-2, 1, 3]", "output": [-2, -1, 0, 1, 2, 3] }
      ]
    },
    {
      "id": "33b5752b-cf42-497f-87cd-9f5ac672d7be",
      "title": "Find Minimum and Maximum in an Array",
      "difficulty": "easy",
      "description": "Write a function that finds both the minimum and maximum elements in an array of numbers. The function should return an object or array containing the minimum and maximum values from the array. If the array is empty, the function should return 'undefined'. It should handle arrays with both positive and negative numbers correctly.",
      "examples": [
        { "input": [1, 2, 3, 4, 5], "output": { "min": 1, "max": 5 } },
        { "input": [-10, -5, 0], "output": { "min": -10, "max": 0 } }
      ]
    },
    {
      "id": "1ab93a71-2a3d-4a33-a5d6-bf576fca9d47",
      "title": "Count the Occurrences of a Character",
      "difficulty": "easy",
      "description": "Write a function that counts the number of occurrences of a specific character in a given string. The function should be case-insensitive and should handle strings containing spaces, punctuation, or other non-alphabetic characters, but they should not be counted as occurrences of the specified character.",
      "examples": [
        { "input": "hello", "character": "l", "output": 2 },
        { "input": "hello world", "character": "o", "output": 2 }
      ]
    },
    {
      "id": "e54c933b-56e5-433b-8d47-f627939a7130",
      "title": "Remove Duplicates from an Array",
      "difficulty": "easy",
      "description": "Write a function that removes all duplicates from an array of numbers. The function should return a new array containing only unique elements, preserving the original order of elements. If the array is empty, the function should return an empty array.",
      "examples": [
        { "input": [1, 2, 2, 3, 3, 4], "output": [1, 2, 3, 4] },
        { "input": [10, 10, 10, 5], "output": [10, 5] }
      ]
    },
    {
      "id": "aff8a4c3-cb3d-4727-b63e-9a0e7fa52c25",
      "title": "Find Factorial of a Number",
      "difficulty": "easy",
      "description": "Write a function that calculates the factorial of a given number. A factorial of a number is the product of all positive integers less than or equal to that number. For example, the factorial of 5 is 5*4*3*2*1 = 120. If the number is 0, return 1.",
      "examples": [
        { "input": 5, "output": 120 },
        { "input": 3, "output": 6 }
      ]
    },
    {
      "id": "9d3a3bcb-fb2a-4f8f-b083-58b342dce5a0",
      "title": "Fibonacci Series",
      "difficulty": "easy",
      "description": "Write a function that returns the Fibonacci series up to a given number. The Fibonacci sequence is a series where each number is the sum of the two preceding ones, starting from 0 and 1. The function should return an array containing the Fibonacci sequence up to the specified number.",
      "examples": [
        { "input": 5, "output": [0, 1, 1, 2, 3] },
        { "input": 8, "output": [0, 1, 1, 2, 3, 5, 8] }
      ]
    },
    {
      "id": "5a4cc5ac-0199-4fa2-8e35-e4d5f6940b01",
      "title": "Check if a String is a Number",
      "difficulty": "easy",
      "description": "Write a function that checks if a string is a valid number. The function should return 'true' if the string represents a valid number (including integers and floating-point numbers) and 'false' otherwise. It should handle edge cases like strings containing non-numeric characters.",
      "examples": [
        { "input": "123", "output": true },
        { "input": "abc", "output": false }
      ]
    },
    {
      "id": "946c1d80-bb21-42ab-8537-bb9f1b62b8e7",
      "title": "Find the Common Elements in Two Arrays",
      "difficulty": "easy",
      "description": "Write a function that finds the common elements between two arrays. The function should return a new array containing only the elements that are present in both input arrays. It should handle arrays with both unique and duplicate elements, ensuring no duplicates in the result. If there are no common elements, return an empty array.",
      "examples": [
        { "input": "[1, 2, 3, 4], [3, 4, 5, 6]", "output": [3, 4] },
        { "input": "[1, 2, 2, 3], [3, 2, 4]", "output": [2, 3] }
      ]
    },
    {
      "id": "2767a76c-9c43-4d1f-8b0f-88ff6f0a5b5e",
      "title": "Find the Largest Palindrome in a String",
      "difficulty": "easy",
      "description": "Write a function that finds the largest palindrome in a given string. A palindrome is a word, phrase, or sequence that reads the same backward as forward. The function should return the largest palindromic substring found in the input string. If there are multiple largest palindromes, return the first one.",
      "examples": [
        { "input": "babad", "output": "bab" },
        { "input": "civicracecar", "output": "racecar" }
      ]
    },
    {
      "id": "20a5b64d-4db9-44d1-b3cd-49e5f6deaf2f",
      "title": "Check if a String Contains a Substring",
      "difficulty": "easy",
      "description": "Write a function that checks if a string contains a given substring. The function should return 'true' if the substring is present in the string and 'false' otherwise. The check should be case-sensitive and handle edge cases like an empty string or an empty substring.",
      "examples": [
        { "input": "hello", "substring": "ell", "output": true },
        { "input": "hello", "substring": "world", "output": false }
      ]
    },
    {
      "id": "02e38be7-c264-4aef-b8d0-4d45f4a6356c",
      "title": "Remove All Spaces from a String",
      "difficulty": "easy",
      "description": "Write a function that removes all spaces from a given string. The function should return a new string with all spaces removed. It should handle strings that contain leading, trailing, or multiple spaces between words.",
      "examples": [
        { "input": "hello world", "output": "helloworld" },
        { "input": "   spaces  everywhere  ", "output": "spaceseverywhere" }
      ]
    },
    {
      "id": "cc96b21f-bf69-4e87-858b-bb3f7a45d13e",
      "title": "Convert String to Uppercase",
      "difficulty": "easy",
      "description": "Write a function that converts a given string to uppercase. The function should return the string with all characters transformed to uppercase. It should work for both lowercase and mixed-case strings.",
      "examples": [
        { "input": "hello", "output": "HELLO" },
        { "input": "world", "output": "WORLD" }
      ]
    },
    {
      "id": "c4d6a3fc-3a85-4609-928a-e8f0173e74b2",
      "title": "Reverse an Integer",
      "difficulty": "easy",
      "description": "Write a function that reverses a given integer. The function should handle both positive and negative integers, ensuring the negative sign is preserved when applicable. If the reversed integer exceeds the maximum or minimum integer limits, return 0.",
      "examples": [
        { "input": 123, "output": 321 },
        { "input": -456, "output": -654 }
      ]
    },
    {
      "id": "58db52f5-c5da-41bc-bf87-98c8a53cb0f4",
      "title": "Sum of Digits in a Number",
      "difficulty": "easy",
      "description": "Write a function that returns the sum of the digits of a given number. The function should handle both positive and negative numbers. It should ignore the sign of the number and only sum the digits. If the number is 0, return 0.",
      "examples": [
        { "input": 123, "output": 6 },
        { "input": -456, "output": 15 }
      ]
    }
  ],
  "medium": [
    {
      "id": "7fa542d4-395d-47b3-89be-508b88c1b5b0",
      "title": "Find the Middle Element of a Linked List",
      "difficulty": "medium",
      "description": "Write a function that finds the middle element of a linked list. The function should return the element located in the middle of the list. If the list has an even number of elements, return the second middle element. The function should work for both singly and doubly linked lists.",
      "examples": [
        { "input": [1, 2, 3, 4, 5], "output": 3 },
        { "input": [1, 2, 3, 4, 5, 6], "output": 4 }
      ]
    },
    {
      "id": "9f25d4da-1280-4a1d-8da4-bf242b171d29",
      "title": "Sort an Array Using Quick Sort",
      "difficulty": "medium",
      "description": "Write a function that sorts an array using the quicksort algorithm. The function should implement the divide-and-conquer approach where an element (pivot) is chosen, and the array is partitioned around the pivot such that all elements less than the pivot are placed before it, and elements greater than the pivot are placed after it. The function should recursively sort the subarrays until they are fully ordered.",
      "examples": [
        { "input": [3, 1, 4, 1, 5, 9], "output": [1, 1, 3, 4, 5, 9] },
        { "input": [10, 7, 8, 9, 1, 5], "output": [1, 5, 7, 8, 9, 10] }
      ]
    },
    {
      "id": "7e8fdf2f-2ef8-42f9-bc71-4b1fc9f273c5",
      "title": "Merge Two Sorted Linked Lists",
      "difficulty": "medium",
      "description": "Write a function that merges two sorted linked lists into one sorted list. The function should traverse both linked lists and merge them by comparing the elements, ensuring the result is also sorted. The time complexity should be linear, i.e., O(n), where n is the total number of elements in both lists.",
      "examples": [
        { "input": "[1, 2, 4], [1, 3, 4]", "output": [1, 1, 2, 3, 4, 4] },
        { "input": "[0, 5, 10], [2, 6, 8]", "output": [0, 2, 5, 6, 8, 10] }
      ]
    },
    {
      "id": "aa244f7f-d573-4b74-8e56-b8d2f5e3e7e0",
      "title": "Find the First Non-Repeating Character in a String",
      "difficulty": "medium",
      "description": "Write a function that finds the first non-repeating character in a string. The function should iterate through the string and identify the first character that does not appear more than once. If no such character exists, return an appropriate message or value indicating no unique character was found.",
      "examples": [
        { "input": "swiss", "output": "w" },
        { "input": "aabbcc", "output": "No unique character" }
      ]
    },
    {
      "id": "d03f8e77-35c2-4d8d-9e98-0f86d609f4ae",
      "title": "Find Common Elements in Two Arrays",
      "difficulty": "medium",
      "description": "Write a function that finds the common elements between two arrays. The function should return a new array containing only the elements that appear in both input arrays. If there are no common elements, return an empty array. The function should handle arrays with both unique and duplicate elements.",
      "examples": [
        { "input": "[1, 2, 3, 4], [3, 4, 5, 6]", "output": [3, 4] },
        { "input": "[10, 20, 30], [40, 50, 60]", "output": [] }
      ]
    },
    {
      "id": "5c02ee13-87f2-4022-8ca3-c47025c97f65",
      "title": "Check for Balanced Parentheses",
      "difficulty": "medium",
      "description": "Write a function that checks if the parentheses in a string are balanced. The function should ensure that each opening parenthesis '(' has a corresponding closing parenthesis ')', and they are properly nested. It should handle cases with multiple types of parentheses, such as curly braces '{}' and square brackets '[]'. If the string is balanced, return true; otherwise, return false.",
      "examples": [
        { "input": "({[()]})", "output": "true" },
        { "input": "([)]", "output": "false" }
      ]
    },
    {
      "id": "f54ec4d5-d5ed-4730-9749-bc5fc8f38067",
      "title": "Implement a Binary Search Tree",
      "difficulty": "medium",
      "description": "Write a function to implement a binary search tree (BST) and perform basic operations such as insertion, deletion, and search. The tree should maintain the property that for any node, the left subtree contains values smaller than the node, and the right subtree contains values larger. The function should also include methods to traverse the tree (in-order, pre-order, post-order).",
      "examples": [
        {
          "input": [5, 3, 7, 2, 4],
          "output": "BST with root 5 and children 3, 7"
        },
        {
          "input": [10, 15, 5, 20],
          "output": "BST with root 10 and children 5, 15, 20"
        }
      ]
    },
    {
      "id": "3b300941-17f0-4a42-8b75-eafedc39c420",
      "title": "Find the Longest Substring Without Repeating Characters",
      "difficulty": "medium",
      "description": "Write a function to find the longest substring without repeating characters. The function should return the length of the longest substring that does not contain any duplicate characters. It should efficiently handle large input strings using a sliding window approach.",
      "examples": [
        { "input": "abcabcbb", "output": 3 },
        { "input": "bbbbb", "output": 1 }
      ]
    },
    {
      "id": "350cf017-2fe4-4382-a02f-8cb156946f95",
      "title": "Find All Substrings of a String",
      "difficulty": "medium",
      "description": "Write a function that finds all substrings of a given string. The function should return a list or array of all possible substrings, including those of varying lengths. It should handle edge cases such as empty strings and strings with repeated characters.",
      "examples": [
        { "input": "abc", "output": ["a", "b", "c", "ab", "bc", "abc"] },
        { "input": "aab", "output": ["a", "a", "b", "aa", "ab", "aab"] }
      ]
    },
    {
      "id": "c2b79b8e-7d8c-4506-bacb-d4e3f3b9b273",
      "title": "Detect Cycle in a Graph",
      "difficulty": "medium",
      "description": "Write a function to detect a cycle in a directed graph. The function should determine if there is a cycle in the graph by checking for any back edges (edges that point to an ancestor node). It should work with both adjacency list and adjacency matrix representations of the graph.",
      "examples": [
        {
          "input": [
            [1, 2],
            [2, 3],
            [3, 1]
          ],
          "output": true
        },
        {
          "input": [
            [1, 2],
            [2, 3],
            [3, 4]
          ],
          "output": false
        }
      ]
    },
    {
      "id": "dc0cfc29-26b9-4c77-8c91-5ef34bdca07e",
      "title": "Find Peak Element in Array",
      "difficulty": "medium",
      "description": "Write a function to find a peak element in an array. A peak element is an element that is strictly greater than its neighbors. For edge elements, consider only one neighbor. The function should return the index of the peak element. If there are multiple peaks, return any one of them.",
      "examples": [
        { "input": [1, 3, 20, 4, 1, 0], "output": 2 },
        { "input": [1, 2, 3, 4, 5], "output": 4 }
      ]
    },
    {
      "id": "ab0a78e7-4bc4-45c2-86f9-1f8d78f2761e",
      "title": "Generate All Permutations of a String",
      "difficulty": "medium",
      "description": "Write a function to generate all permutations of a string. The function should return a list of all possible unique permutations of the input string, including different character orders. Ensure no duplicates are present in the output list. The function should handle both non-repeating and repeating characters.",
      "examples": [
        {
          "input": "abc",
          "output": ["abc", "acb", "bac", "bca", "cab", "cba"]
        },
        { "input": "aab", "output": ["aab", "aba", "baa"] }
      ]
    },
    {
      "id": "be78f4c1-43bd-4778-a524-1b73e76f6db9",
      "title": "Find Majority Element in Array",
      "difficulty": "medium",
      "description": "Write a function to find the majority element in an array. The majority element is the element that appears more than half the time in the array. The function should return the majority element if it exists, otherwise return a message indicating no majority element.",
      "examples": [
        { "input": [3, 3, 4, 2, 4, 4, 2, 4, 4], "output": 4 },
        { "input": [3, 3, 4, 2, 4, 2, 4, 4], "output": "No majority element" }
      ]
    },
    {
      "id": "90c3d59c-7767-4e96-8bcb-6e30880e3e89",
      "title": "Binary Tree Level Order Traversal",
      "difficulty": "medium",
      "description": "Write a function to perform level-order traversal on a binary tree. The function should return a list of lists, where each list contains the nodes at the corresponding level of the tree. Level-order traversal visits nodes from left to right, starting from the root and proceeding level by level.",
      "examples": [
        {
          "input": [3, 9, 20, null, null, 15, 7],
          "output": [[3], [9, 20], [15, 7]]
        },
        {
          "input": [1, 2, 3, 4, 5, 6, 7],
          "output": [[1], [2, 3], [4, 5, 6, 7]]
        }
      ]
    },
    {
      "id": "5d93b845-091f-4e68-a803-08972a3a6b90",
      "title": "Count Inversions in Array",
      "difficulty": "medium",
      "description": "Write a function to count the number of inversions in an array. An inversion is a pair of elements where the larger element appears before the smaller element in the array. The function should return the total number of inversions in the array. The solution should aim to do this efficiently (O(n log n) time complexity).",
      "examples": [
        { "input": [1, 3, 5, 2, 4, 6], "output": 3 },
        { "input": [5, 4, 3, 2, 1], "output": 10 }
      ]
    }
  ],
  "hard": [
    {
      "id": "93a74596-1d57-47f1-a698-d088764b3b1d",
      "title": "Solve N-Queens Problem",
      "difficulty": "hard",
      "description": "Write a function to solve the N-Queens problem, where you place N queens on an NxN chessboard such that no two queens threaten each other.",
      "examples": [
        {
          "input": [4],
          "output": [
            "[1, 3, 0, 2],[2, 0, 3, 1],[3, 1, 2, 0],[0, 2, 1, 3]"
          ]
        },
        {
          "input": [8],
          "output": "[[0, 4, 7, 5, 2, 6, 3, 1]]"
        }
      ]
    },
    {
      "id": "9fd0e883-cdd0-4978-a083-022a0a08389a",
      "title": "Find the Longest Substring Without Repeating Characters",
      "difficulty": "hard",
      "description": "Write a function to find the longest substring in a given string without repeating characters.",
      "examples": [
        {
          "input": ["abcabcbb"],
          "output": "abc"
        },
        {
          "input": ["bbbbb"],
          "output": "b"
        }
      ]
    },
    {
      "id": "da28a9c5-1682-4a30-a5e6-89fa0a181b0f",
      "title": "Find the Shortest Path in a Maze",
      "difficulty": "hard",
      "description": "Write a function to find the shortest path in a maze from a start point to an endpoint using BFS.",
      "examples": [
        {
          "input": [
            [0, 1, 0],
            [0, 1, 0],
            [0, 0, 0]
          ],
          "output": 4
        },
        {
          "input": [
            [0, 0, 0],
            [1, 1, 0],
            [0, 0, 0]
          ],
          "output": 4
        }
      ]
    },
    {
      "id": "edcf7292-bc60-41ae-8577-933c9604fe6e",
      "title": "Kth Smallest Element in a BST",
      "difficulty": "hard",
      "description": "Write a function to find the kth smallest element in a Binary Search Tree.",
      "examples": [
        {
          "input": [[3, 1, 4, 2], 2],
          "output": 2
        },
        {
          "input": [[5, 3, 6, 2, 4], 3],
          "output": 4
        }
      ]
    },
    {
      "id": "392e4062-2646-4c64-b375-94de2db8c2c0",
      "title": "Solve Sudoku",
      "difficulty": "hard",
      "description": "Write a function to solve a Sudoku puzzle by filling in the missing digits in a partially completed 9x9 grid.",
      "examples": [
        {
          "input": [
            ["5", "3", ".", ".", "7", ".", ".", ".", "."],
            ["6", ".", ".", "1", "9", "5", ".", ".", "."],
            [".", "9", "8", ".", ".", ".", ".", "6", "."],
            ["8", ".", ".", ".", "6", ".", ".", ".", "3"],
            ["4", ".", ".", "8", ".", "3", ".", ".", "1"],
            ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
            [".", "6", ".", ".", ".", ".", "2", "8", "."],
            [".", ".", ".", "4", "1", "9", ".", ".", "5"],
            [".", ".", ".", ".", "8", ".", ".", "7", "9"]
          ],
          "output": [
            ["5", "3", "4", "6", "7", "8", "9", "1", "2"],
            ["6", "7", "2", "1", "9", "5", "3", "4", "8"],
            ["1", "9", "8", "3", "4", "2", "5", "6", "7"],
            ["8", "5", "9", "7", "6", "1", "4", "2", "3"],
            ["4", "2", "6", "8", "5", "3", "7", "9", "1"],
            ["7", "1", "3", "9", "2", "4", "8", "5", "6"],
            ["9", "6", "1", "5", "3", "7", "2", "8", "4"],
            ["2", "8", "7", "4", "1", "9", "6", "3", "5"],
            ["3", "4", "5", "2", "8", "6", "1", "7", "9"]
          ]
        }
      ]
    },
    {
      "id": "22ed9fa0-b78f-46fb-bfa9-01c6ed2537c0",
      "title": "Longest Palindromic Substring",
      "difficulty": "hard",
      "description": "Write a function to find the longest palindromic substring in a given string.",
      "examples": [
        {
          "input": ["babad"],
          "output": "aba"
        },
        {
          "input": ["cbbd"],
          "output": "bb"
        }
      ]
    },
    {
      "id": "f43c4d25-c3b5-47d3-8469-1a517bb7bcf6",
      "title": "Word Ladder Problem",
      "difficulty": "hard",
      "description": "Write a function to find the shortest transformation sequence from a start word to an end word, where each word in the sequence must differ by exactly one letter from the previous word.",
      "examples": [
        {
          "input": ["hit", "cog", ["hot", "dot", "dog", "lot", "log", "cog"]],
          "output": ["hit", "hot", "dot", "dog", "cog"]
        },
        {
          "input": ["hit", "cog", ["hot", "dot", "dog", "lot", "log"]],
          "output": []
        }
      ]
    },
    {
      "id": "633a41a2-1004-42e3-b926-466d7bb0c7b5",
      "title": "Implement a Trie",
      "difficulty": "hard",
      "description": "Write a function to implement a Trie (prefix tree) data structure and perform basic operations such as insertion, searching for a word, and checking if a word starts with a given prefix.",
      "examples": [
        {
          "input": [["apple", "app"], "apple"],
          "output": true
        },
        {
          "input": [["apple", "app"], "app"],
          "output": true
        },
        {
          "input": [["apple", "app"], "appl"],
          "output": false
        }
      ]
    },
    {
      "id": "f2ef28ff-ff6f-471d-9815-0197e46414d6",
      "title": "Find Strongly Connected Components",
      "difficulty": "hard",
      "description": "Write a function to find all strongly connected components (SCCs) in a directed graph using Kosaraju's or Tarjan's algorithm.",
      "examples": [
        {
          "input": [
            [1, 2, 3],
            [
              [1, 2],
              [2, 3],
              [3, 1]
            ]
          ],
          "output": [[1, 2, 3]]
        },
        {
          "input": [
            [1, 2, 3, 4],
            [
              [1, 2],
              [2, 3],
              [4, 3]
            ]
          ],
          "output": [[1, 2, 3], [4]]
        }
      ]
    },
    {
      "id": "4e738e9f-f8a3-487a-bfbb-f6829d1f416f",
      "title": "Max Flow Problem",
      "difficulty": "hard",
      "description": "Write a function to find the maximum flow in a flow network using the Ford-Fulkerson algorithm or Edmonds-Karp algorithm.",
      "examples": [
        {
          "input": [[5, 3, 6, 2, 4], 10],
          "output": 10
        },
        {
          "input": [[4, 2, 7, 5], 7],
          "output": 7
        }
      ]
    },
    {
      "id": "c6f947b3-7f7a-4e32-b2b5-bb64ae4828f2",
      "title": "Construct Binary Tree from Preorder and Inorder Traversals",
      "difficulty": "hard",
      "description": "Write a function to construct a binary tree from its preorder and inorder traversal arrays.",
      "examples": [
        {
          "input": [
            [3, 9, 20, 15, 7],
            [9, 3, 15, 20, 7]
          ],
          "output": {
            "root": 3,
            "left": { "root": 9 },
            "right": {
              "root": 20,
              "left": { "root": 15 },
              "right": { "root": 7 }
            }
          }
        }
      ]
    },
    {
      "id": "f839cfae-d445-4d8f-b073-f5dcfa493c7c",
      "title": "Implement Dijkstra’s Algorithm",
      "difficulty": "hard",
      "description": "Write a function to find the shortest path in a graph using Dijkstra's algorithm.",
      "examples": [
        {
          "input": [
            [1, 2, 3, 1],
            { "1": [2, 4], "2": [3, 2], "4": [5], "5": [] }
          ],
          "output": 4
        },
        {
          "input": [[3, 5, 7, 2], { "1": [4, 3], "2": [5], "3": [] }],
          "output": 5
        }
      ]
    },
    {
      "id": "e6df98af-8f9f-42e1-8399-d170f5b6dfb4",
      "title": "Find Minimum Number of Coins",
      "difficulty": "hard",
      "description": "Write a function to find the minimum number of coins required to make change for a given amount, using a list of available coins.",
      "examples": [
        {
          "input": [11, [1, 2, 5]],
          "output": 3
        },
        {
          "input": [7, [2, 5, 10]],
          "output": 2
        }
      ]
    }
  ]
}
